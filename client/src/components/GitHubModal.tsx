import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Badge } from './ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { useToast } from '@/hooks/use-toast';
import { githubService } from '../lib/GitHubService';
import { supabaseService } from '../lib/SupabaseService';
import { useWeblisite } from '../context/WeblisiteContext';

interface GitHubModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess?: (repositoryUrl: string, commitUrl: string) => void;
  projectPrompt?: string;
}

const GitHubModal = ({ isOpen, onClose, onSuccess, projectPrompt }: GitHubModalProps) => {
  const { toast } = useToast();
  const { 
    githubAccessToken, 
    setGithubAccessToken, 
    githubUser, 
    setGithubUser, 
    lastPushedRepo, 
    setLastPushedRepo 
  } = useWeblisite();
  
  // Connection state
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  
  // Repository management
  const [repositories, setRepositories] = useState<any[]>([]);
  const [isLoadingRepos, setIsLoadingRepos] = useState(false);
  const [selectedRepo, setSelectedRepo] = useState('');
  
  // New repository form
  const [newRepoName, setNewRepoName] = useState('');
  const [newRepoDescription, setNewRepoDescription] = useState('');
  const [isPrivate, setIsPrivate] = useState(true);
  const [commitMessage, setCommitMessage] = useState('');
  
  // UI state
  const [isDeploying, setIsDeploying] = useState(false);
  const [activeTab, setActiveTab] = useState<'existing' | 'new'>('new');

  // Initialize suggested repository name and description
  useEffect(() => {
    if (projectPrompt) {
      setNewRepoName(githubService.generateRepositoryName(projectPrompt));
      setNewRepoDescription(githubService.generateRepositoryDescription(projectPrompt));
      setCommitMessage(`Initial commit: ${projectPrompt.substring(0, 50)}${projectPrompt.length > 50 ? '...' : ''}`);
    } else {
      setNewRepoName(`weblisite-project-${Date.now()}`);
      setNewRepoDescription('Generated by Weblisite IDE');
      setCommitMessage('Initial commit from Weblisite IDE');
    }
  }, [projectPrompt]);

  // Check GitHub connection status on mount and when context changes
  useEffect(() => {
    if (isOpen) {
      checkGitHubConnection();
    }
  }, [isOpen, githubAccessToken, githubUser]);

  const checkGitHubConnection = async () => {
    try {
      // Check if we have GitHub state from context
      if (githubAccessToken && githubUser) {
        githubService.setAccessToken(githubAccessToken);
        setIsConnected(true);
        return;
      }

      // First check if we have a token from Supabase OAuth
      const supabaseToken = await supabaseService.getGitHubAccessToken();
      if (supabaseToken) {
        githubService.setAccessToken(supabaseToken);
      }

      // Try to validate the token
      if (githubService.hasAccessToken()) {
        const validation = await githubService.validateToken();
        setIsConnected(validation.valid);
        
        if (validation.valid) {
          // Update global context state
          setGithubAccessToken(githubService.getAccessToken());
          setGithubUser(validation.user);
        }
        
        if (!validation.hasRepoAccess) {
          toast({
            title: "Limited GitHub Access",
            description: "Your GitHub token doesn't have repository access. Please reconnect with enhanced permissions.",
            variant: "destructive",
          });
        }
      }
    } catch (error) {
      console.error('Error checking GitHub connection:', error);
      setIsConnected(false);
      // Clear global context state on error
      setGithubAccessToken(null);
      setGithubUser(null);
    }
  };

  const connectToGitHub = async () => {
    try {
      setIsConnecting(true);
      
      // Use Supabase GitHub OAuth with enhanced permissions
      await supabaseService.signInWithGitHubForRepos();
      
      toast({
        title: "Connecting to GitHub...",
        description: "You will be redirected to GitHub for authorization.",
      });
    } catch (error: any) {
      console.error('Error connecting to GitHub:', error);
      toast({
        title: "GitHub Connection Failed",
        description: error.message || "Failed to connect to GitHub.",
        variant: "destructive",
      });
      setIsConnecting(false);
    }
  };

  const disconnectFromGitHub = async () => {
    try {
      // Clear the GitHub access token from service
      githubService.clearAccessToken();
      
      // Clear the global context state
      setGithubAccessToken(null);
      setGithubUser(null);
      setLastPushedRepo(null);
      
      // Reset the local component state
      setIsConnected(false);
      setRepositories([]);
      setSelectedRepo('');
      
      toast({
        title: "GitHub Disconnected",
        description: "You have successfully disconnected from GitHub. You can now connect a different account.",
      });
    } catch (error: any) {
      console.error('Error disconnecting from GitHub:', error);
      toast({
        title: "Disconnect Failed",
        description: error.message || "Failed to disconnect from GitHub.",
        variant: "destructive",
      });
    }
  };

  const loadRepositories = async () => {
    if (!isConnected) return;
    
    try {
      setIsLoadingRepos(true);
      const repos = await githubService.getRepositories();
      setRepositories(repos);
    } catch (error: any) {
      console.error('Error loading repositories:', error);
      toast({
        title: "Failed to Load Repositories",
        description: error.message || "Could not fetch your GitHub repositories.",
        variant: "destructive",
      });
    } finally {
      setIsLoadingRepos(false);
    }
  };

  const handlePushToExistingRepo = async () => {
    if (!selectedRepo) {
      toast({
        title: "Repository Required",
        description: "Please select a repository to push to.",
        variant: "destructive",
      });
      return;
    }

    try {
      setIsDeploying(true);
      
      const [owner, repo] = selectedRepo.split('/');
      const result = await githubService.pushToRepository(
        owner,
        repo,
        commitMessage || 'Deploy from Weblisite IDE'
      );

      // Update global repository state
      setLastPushedRepo({
        url: result.repositoryUrl,
        name: repo,
        owner: owner
      });

      toast({
        title: "Successfully Pushed to GitHub!",
        description: `Your code has been pushed to ${selectedRepo}`,
      });

      onSuccess?.(result.repositoryUrl, result.commitUrl);
      onClose();
    } catch (error: any) {
      console.error('Error pushing to repository:', error);
      toast({
        title: "Push Failed",
        description: error.message || "Failed to push code to GitHub repository.",
        variant: "destructive",
      });
    } finally {
      setIsDeploying(false);
    }
  };

  const handleCreateAndPushRepo = async () => {
    if (!newRepoName.trim()) {
      toast({
        title: "Repository Name Required",
        description: "Please enter a name for your new repository.",
        variant: "destructive",
      });
      return;
    }

    try {
      setIsDeploying(true);
      
      const result = await githubService.createAndPushRepository(
        newRepoName.trim(),
        newRepoDescription.trim() || undefined,
        isPrivate,
        commitMessage || 'Initial commit from Weblisite IDE'
      );

      // Update global repository state
      setLastPushedRepo({
        url: result.repositoryUrl,
        name: newRepoName.trim(),
        owner: githubUser?.login || 'unknown'
      });

      toast({
        title: "Repository Created and Code Pushed!",
        description: `Successfully created ${newRepoName} and pushed your code.`,
      });

      onSuccess?.(result.repositoryUrl, result.commitUrl);
      onClose();
    } catch (error: any) {
      console.error('Error creating repository:', error);
      toast({
        title: "Repository Creation Failed",
        description: error.message || "Failed to create repository and push code.",
        variant: "destructive",
      });
    } finally {
      setIsDeploying(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className={`fixed inset-0 z-50 ${isOpen ? 'block' : 'hidden'}`}>
      {/* Backdrop */}
      <div className="fixed inset-0 bg-black/80 backdrop-blur-sm" onClick={onClose} />
      
      {/* Modal */}
      <div className="fixed inset-0 flex items-center justify-center p-4">
        <Card className="w-full max-w-2xl bg-gradient-to-br from-slate-900/95 via-slate-800/95 to-slate-900/95 backdrop-blur-xl border border-white/20 shadow-2xl">
          <CardHeader className="relative">
            {/* Background effects matching main app */}
            <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-cyan-500/5 rounded-t-lg"></div>
            <div className="relative flex items-center justify-between">
              <div>
                <CardTitle className="text-white text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                  ðŸš€ Push to GitHub
                </CardTitle>
                <p className="text-slate-400 mt-1">Deploy your project to GitHub repository</p>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={onClose}
                disabled={isConnecting || isDeploying}
                className="text-slate-400 hover:text-white hover:bg-slate-700/50"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </Button>
            </div>
          </CardHeader>
          
          <CardContent className="relative">
            {/* Background gradient matching main app */}
            <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 via-purple-500/5 to-cyan-500/5"></div>
            <div className="relative">
              {!isConnected ? (
                <div className="text-center py-8">
                  <div className="w-16 h-16 mx-auto mb-6 bg-gradient-to-r from-slate-700/50 to-slate-800/50 backdrop-blur-sm border border-white/10 rounded-full flex items-center justify-center">
                    <svg className="w-8 h-8 text-slate-300" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                    </svg>
                  </div>
                  <h3 className="text-xl font-semibold text-white mb-2">Connect Your GitHub Account</h3>
                  <p className="text-slate-400 mb-6">
                    Connect your GitHub account to push your generated code to a repository
                  </p>
                  <Button 
                    onClick={connectToGitHub}
                    disabled={isConnecting}
                    className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 border-2 border-blue-400/50 shadow-lg hover:shadow-blue-500/25 transition-all duration-300 transform hover:scale-105"
                  >
                    {isConnecting ? (
                      <>
                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                        Connecting...
                      </>
                    ) : (
                      <>
                        <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                        </svg>
                        Connect GitHub Account
                      </>
                    )}
                  </Button>
                </div>
              ) : (
                <div className="space-y-6">
                  {/* Connected GitHub User Info */}
                  <div className="flex items-center gap-3 p-4 bg-slate-800/50 backdrop-blur-sm border border-white/10 rounded-xl">
                    <img 
                      src={githubUser?.avatar_url} 
                      alt={githubUser?.name}
                      className="w-10 h-10 rounded-full border-2 border-white/20"
                    />
                    <div className="flex-1">
                      <p className="text-white font-medium">{githubUser?.name}</p>
                      <p className="text-slate-400 text-sm">@{githubUser?.login}</p>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        size="sm"
                        className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white border-0 px-3 py-1 h-auto cursor-default shadow-lg"
                        disabled
                      >
                        <svg className="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span className="text-xs font-medium">Connected</span>
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={disconnectFromGitHub}
                        className="text-slate-400 hover:text-red-400 border-slate-600 hover:border-red-500 hover:bg-red-900/20 px-3 py-1 h-auto"
                      >
                        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                        </svg>
                        <span className="text-xs">Disconnect</span>
                      </Button>
                    </div>
                  </div>

                  {/* Repository Selection Tabs */}
                  <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'existing' | 'new')}>
                    <TabsList className="grid w-full grid-cols-2 bg-slate-800/50 backdrop-blur-sm border border-white/10">
                      <TabsTrigger value="new" className="data-[state=active]:bg-slate-700/70 data-[state=active]:text-white">
                        Create New Repository
                      </TabsTrigger>
                      <TabsTrigger value="existing" className="data-[state=active]:bg-slate-700/70 data-[state=active]:text-white">
                        Use Existing Repository
                      </TabsTrigger>
                    </TabsList>

                    <TabsContent value="new" className="space-y-4">
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="repo-name" className="text-white">Repository Name</Label>
                          <Input
                            id="repo-name"
                            value={newRepoName}
                            onChange={(e) => setNewRepoName(e.target.value)}
                            placeholder="my-awesome-project"
                            className="bg-slate-800/50 border-slate-600 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20"
                          />
                        </div>

                        <div>
                          <Label htmlFor="repo-description" className="text-white">Description (Optional)</Label>
                          <Input
                            id="repo-description"
                            value={newRepoDescription}
                            onChange={(e) => setNewRepoDescription(e.target.value)}
                            placeholder="A project generated by Weblisite IDE"
                            className="bg-slate-800/50 border-slate-600 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20"
                          />
                        </div>

                        <div className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            id="private-repo"
                            checked={isPrivate}
                            onChange={(e) => setIsPrivate(e.target.checked)}
                            className="rounded border-slate-600 text-blue-600 focus:ring-blue-500 focus:ring-2"
                          />
                          <Label htmlFor="private-repo" className="text-white">
                            Make repository private
                          </Label>
                        </div>

                        <div>
                          <Label htmlFor="commit-message" className="text-white">Commit Message</Label>
                          <Input
                            id="commit-message"
                            value={commitMessage}
                            onChange={(e) => setCommitMessage(e.target.value)}
                            placeholder="Initial commit from Weblisite IDE"
                            className="bg-slate-800/50 border-slate-600 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20"
                          />
                        </div>

                        <Button 
                          onClick={handleCreateAndPushRepo}
                          disabled={isDeploying || !newRepoName.trim()}
                          className="w-full py-3 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 border-2 border-blue-400/50 shadow-lg hover:shadow-blue-500/25 transition-all duration-300 transform hover:scale-105"
                        >
                          {isDeploying ? (
                            <>
                              <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                              Creating Repository & Pushing Code...
                            </>
                          ) : (
                            'ðŸš€ Create Repository & Push Code'
                          )}
                        </Button>
                      </div>
                    </TabsContent>

                    <TabsContent value="existing" className="space-y-4">
                      <div className="space-y-4">
                        <div>
                          <div className="flex items-center justify-between mb-2">
                            <Label className="text-white">Select Repository</Label>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={loadRepositories}
                              disabled={isLoadingRepos}
                              className="text-slate-400 hover:text-white hover:bg-slate-700/50"
                            >
                              {isLoadingRepos ? (
                                <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
                              ) : (
                                'Refresh'
                              )}
                            </Button>
                          </div>
                          
                          <Select value={selectedRepo} onValueChange={setSelectedRepo}>
                            <SelectTrigger className="bg-slate-800/50 border-slate-600 text-white focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20">
                              <SelectValue placeholder="Select a repository to push to" />
                            </SelectTrigger>
                            <SelectContent className="bg-slate-800/95 backdrop-blur-sm border-slate-600">
                              {repositories.map((repo) => (
                                <SelectItem key={repo.id} value={repo.full_name} className="text-white hover:bg-slate-700/50">
                                  <div className="flex items-center justify-between w-full">
                                    <span>{repo.name}</span>
                                    {repo.private && (
                                      <Badge variant="secondary" className="ml-2 bg-slate-700/50 text-slate-300">
                                        Private
                                      </Badge>
                                    )}
                                  </div>
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>

                          {repositories.length === 0 && !isLoadingRepos && (
                            <Button
                              variant="outline"
                              onClick={loadRepositories}
                              className="w-full mt-2 border-slate-600 text-slate-400 hover:text-white hover:bg-slate-700/50"
                            >
                              Load Your Repositories
                            </Button>
                          )}
                        </div>

                        <div>
                          <Label htmlFor="existing-commit-message" className="text-white">Commit Message</Label>
                          <Input
                            id="existing-commit-message"
                            value={commitMessage}
                            onChange={(e) => setCommitMessage(e.target.value)}
                            placeholder="Deploy from Weblisite IDE"
                            className="bg-slate-800/50 border-slate-600 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20"
                          />
                        </div>

                        <Button 
                          onClick={handlePushToExistingRepo}
                          disabled={isDeploying || !selectedRepo}
                          className="w-full py-3 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 border-2 border-blue-400/50 shadow-lg hover:shadow-blue-500/25 transition-all duration-300 transform hover:scale-105"
                        >
                          {isDeploying ? (
                            <>
                              <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                              Pushing to Repository...
                            </>
                          ) : (
                            'ðŸš€ Push to Repository'
                          )}
                        </Button>
                      </div>
                    </TabsContent>
                  </Tabs>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default GitHubModal;
